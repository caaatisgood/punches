#import "errors.jsligo" "Errors"

type WipId = nat;

type Wip = {
  id: WipId,
  wip: string,
  punch_ids: list<nat>,
  active: bool,
  set_at: timestamp,
};

type WipMap = map<WipId, Wip>;

type Punch = {
  id: nat,
  wip_id: nat,
  note: string,
  punched_at: timestamp,
};

type Storage = {
  punches: big_map<nat, Punch>,
  tickets: big_map<nat, ticket<nat>>,
  wips: big_map<address, WipMap>,
  houses: big_map<address, string>,
  punch_count: nat,
  punch_cd: nat,
  wip_chars: nat,
  note_chars: nat,
  house_set: set<string>,
  admin: address,
  paused: bool,
};

type Parameter =
  // permissionless
  | ["Genesis_wip", { wip: string, house: string }]
  | ["Set_wip", string]
  | ["Update_wip", { wip: string, id: WipId }]
  | ["Punch", { note: string, id: WipId }]
  | ["Activate_wip", WipId]
  | ["Deactivate_wip", WipId]
  // admin
  | ["Set_punch_cd", nat]
  | ["Set_wip_chars", nat]
  | ["Set_note_chars", nat]
  | ["Set_pause", bool];

type Return = [list<operation>, Storage];

const _insertWip = (wip: string, wipMap): WipMap => {
  const id: nat = Map.size(wipMap);
  const newWip: Wip = {
    id,
    wip,
    punch_ids: (list([]) as list<nat>),
    active: true,
    set_at: Tezos.get_now(),
  };
  return Map.add(id, newWip, wipMap);
};

const _assertWipLen = (wip: string, wip_max_chars: nat) => {
  const wipLen: nat = String.length(wip);
  assert_with_error(wipLen > (0 as nat), Errors.wip_cannot_be_empty);
  assert_with_error(wipLen <= wip_max_chars, Errors.wip_max_len_exceeded);
};

const genesisWip = (
  { punches, tickets, wips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused }: Storage,
  { wip, house }: { wip: string, house: string }
) => {
  assert_with_error(!paused, Errors.kt_paused);
  _assertWipLen(wip, wip_chars);
  assert_with_error(Set.mem(house, house_set), Errors.invalid_house);
  const sender = Tezos.get_sender();
  const wipMap: WipMap = match((Big_map.find_opt(sender, wips)), {
    Some: (wipMap: WipMap) => failwith(Errors.has_genesis_wip_already),
    None: () => (Map.empty as WipMap),
  });
  const updatedHouses = Big_map.add(sender, house, houses);
  const updatedWipMap = _insertWip(wip, wipMap);
  const updatedWips = Big_map.update(
    sender,
    Some(updatedWipMap),
    wips
  );
  return { punches, tickets, wips: updatedWips, houses: updatedHouses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused };
};

const setWip = (
  { punches, tickets, wips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused }: Storage,
  wip: string
): Storage => {
  assert_with_error(!paused, Errors.kt_paused);
  _assertWipLen(wip, wip_chars);
  const sender = Tezos.get_sender();
  const wipMap: WipMap = match((Big_map.find_opt(sender, wips)), {
    Some: (wipMap: WipMap) => wipMap,
    None: () => failwith(Errors.has_no_genesis_wip),
  });
  const updatedWipMap = _insertWip(wip, wipMap);
  const updatedWips = Big_map.update(
    sender,
    Some(updatedWipMap),
    wips
  );
  return { punches, tickets, wips: updatedWips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused };
};

const updateWip = (
  { punches, tickets, wips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused }: Storage,
  { wip, id }: { wip: string, id: nat }
): Storage => {
  assert_with_error(!paused, Errors.kt_paused);
  _assertWipLen(wip, wip_chars);
  const sender = Tezos.get_sender();
  const wipMap: WipMap = match((Big_map.find_opt(sender, wips)), {
    Some: (wipMap: WipMap) => wipMap,
    None: () => failwith(Errors.wip_not_found),
  });
  const wipObj: Wip = match((Map.find_opt(id, wipMap)), {
    Some: (wipObj: Wip) => wipObj,
    None: () => failwith(Errors.wip_not_found),
  });
  const updatedWipMap = Map.update(id, Some({ ...wipObj, wip }), wipMap);
  const updatedWips = Big_map.update(sender, Some(updatedWipMap), wips);
  return { punches, tickets, wips: updatedWips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused };
};

const punch = (
  { punches, tickets, wips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused }: Storage,
  { note, id }: { note: string, id: WipId }
): Storage => {
  assert_with_error(!paused, Errors.kt_paused);
  assert_with_error(String.length(note) <= note_chars, Errors.note_max_len_exceeded);
  const sender = Tezos.get_sender();
  const wipMap: WipMap = match((Big_map.find_opt(sender, wips)), {
    Some: (wipMap: WipMap) => wipMap,
    None: () => failwith(Errors.wip_not_found),
  });
  const wipObj: Wip = match((Map.find_opt(id, wipMap)), {
    Some: (wipObj: Wip) => wipObj,
    None: () => failwith(Errors.wip_not_found),
  });
  assert_with_error(wipObj.active, Errors.wip_inactive);
  match((List.head_opt(wipObj.punch_ids)), {
    Some: (id: nat) => {
      const punch: Punch = match(Big_map.find_opt(id, punches), {
        Some: (punch) => punch,
        None: () => failwith(Errors.punch_not_found),
      });
      assert_with_error((punch.punched_at + int(punch_cd)) >= Tezos.get_now(), Errors.punch_limit_exceeded);
    },
    None: () => unit,
  });
  const punchId: nat = punch_count;
  const ticket_: ticket<nat> = Option.unopt(Tezos.create_ticket(punchId, 1 as nat));
  const [_, updatedTickets] = Big_map.get_and_update(punchId, Some(ticket_), tickets);
  const updatedWipMap = Map.update(id,
    Some({
      ...wipObj,
      punch_ids: list([punchId, ...wipObj.punch_ids]),
    }),
    wipMap
  );
  const updatedWips = Big_map.update(sender, Some(updatedWipMap), wips);
  const punch: Punch = {
    id: punchId,
    wip_id: id,
    note,
    punched_at: Tezos.get_now(),
  };
  const updatedPunches = Big_map.add(punchId, punch, punches);
  return {
    punches: updatedPunches,
    tickets: updatedTickets,
    wips: updatedWips,
    houses,
    punch_count: punchId + (1 as nat),
    punch_cd,
    wip_chars,
    note_chars,
    house_set,
    admin,
    paused,
  };
};

const activateWip = (
  { punches, tickets, wips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused }: Storage,
  id: WipId
): Storage => {
  const sender = Tezos.get_sender();
  const wipMap: WipMap = match((Big_map.find_opt(sender, wips)), {
    Some: (wipMap: WipMap) => wipMap,
    None: () => failwith(Errors.wip_not_found),
  });
  const wipObj: Wip = match((Map.find_opt(id, wipMap)), {
    Some: (wipObj: Wip) => wipObj,
    None: () => failwith(Errors.wip_not_found),
  });
  if (wipObj.active) {
    return { punches, tickets, wips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused };
  }
  const updatedWipMap = Map.update(id, Some({ ...wipObj, active: true }), wipMap);
  const updatedWips = Big_map.update(sender, Some(updatedWipMap), wips);
  return { punches, tickets, wips: updatedWips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused };
};

const deactivateWip = (
  { punches, tickets, wips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused }: Storage,
  id: WipId
): Storage => {
  const sender = Tezos.get_sender();
  const wipMap: WipMap = match((Big_map.find_opt(sender, wips)), {
    Some: (wipMap: WipMap) => wipMap,
    None: () => failwith(Errors.wip_not_found),
  });
  const wipObj: Wip = match((Map.find_opt(id, wipMap)), {
    Some: (wipObj: Wip) => wipObj,
    None: () => failwith(Errors.wip_not_found),
  });
  if (!wipObj.active) {
    return { punches, tickets, wips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused };
  }
  const updatedWipMap = Map.update(id, Some({ ...wipObj, active: false }), wipMap);
  const updatedWips = Big_map.update(sender, Some(updatedWipMap), wips);
  return { punches, tickets, wips: updatedWips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused };
};

const setPunchCd = (
  { punches, tickets, wips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused }: Storage,
  cd: nat
): Storage => {
  assert_with_error((Tezos.get_sender() == admin), Errors.not_allowed);
  return { punches, tickets, wips, houses, punch_count, punch_cd: cd, wip_chars, note_chars, house_set, admin, paused };
};

const setWipChars = (
  { punches, tickets, wips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused }: Storage,
  chars: nat
): Storage => {
  assert_with_error((Tezos.get_sender() == admin), Errors.not_allowed);
  return { punches, tickets, wips, houses, punch_count, punch_cd, wip_chars: chars, note_chars, house_set, admin, paused };
};

const setNoteChars = (
  { punches, tickets, wips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused }: Storage,
  chars: nat
): Storage => {
  assert_with_error((Tezos.get_sender() == admin), Errors.not_allowed);
  return { punches, tickets, wips, houses, punch_count, punch_cd, wip_chars, note_chars: chars, house_set, admin, paused };
};

const setPause = (
  { punches, tickets, wips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused }: Storage,
  paused_: bool
) => {
  assert_with_error((Tezos.get_sender() == admin), Errors.not_allowed);
  return { punches, tickets, wips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused: paused_ };
}

const main = (parameter: Parameter, store: Storage): Return => {
  return [
    list([]),
    (match(parameter, {
      Genesis_wip: (params) => genesisWip(store, params),
      Set_wip: (wip: string) => setWip(store, wip),
      Update_wip: (params) => updateWip(store, params),
      Punch: (params) => punch(store, params),
      Activate_wip: (wip_id: WipId) => activateWip(store, wip_id),
      Deactivate_wip: (wip_id: WipId) => deactivateWip(store, wip_id),
      Set_punch_cd: (cd: nat) => setPunchCd(store, cd),
      Set_wip_chars: (chars: nat) => setWipChars(store, chars),
      Set_note_chars: (chars: nat) => setNoteChars(store, chars),
      Set_pause: (paused: bool) => setPause(store, paused),
    }))
  ];
};

// @view
const punch_exist = (id: nat, store: Storage): bool => {
  const { punches, tickets, wips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused } = store;
  return id < punch_count;
};

// @view
const get_punch_count = (_: unit, store: Storage): nat => {
  const { punches, tickets, wips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused } = store;
  return punch_count;
};

// @view
const get_punches = (_: unit, store: Storage): list<Punch> => {
  const { punches, tickets, wips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused } = store;
  let punchList: list<Punch> = list([]);
  for (let i: nat = 0 as nat; i < punch_count; i += (1 as nat)) {
    match(Big_map.find_opt(i, punches), {
      Some: (punch: Punch) => {
        punchList = list([punch, ...punchList]);
      },
      None: () => unit,
    });
  };
  return punchList;
};

// @view
const get_punch = (id: nat, store: Storage): Punch => {
  const { punches, tickets, wips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused } = store;
  return match((Big_map.find_opt(id, punches)), {
    Some: (punch: Punch) => punch,
    None: () => failwith(Errors.wip_not_found),
  });
};

// @view
const get_wips = (addr: address, store: Storage): WipMap => {
  const { punches, tickets, wips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused } = store;
  return match((Big_map.find_opt(addr, wips)), {
    Some: (wipMap: WipMap) => wipMap,
    None: () => failwith(Errors.wip_not_found),
  });
};

// @view
const get_wip = (
  { addr, id }: { addr: address, id: WipId },
  store: Storage
): Wip => {
  const { punches, tickets, wips, houses, punch_count, punch_cd, wip_chars, note_chars, house_set, admin, paused } = store;
  const wipMap: WipMap = match((Big_map.find_opt(addr, wips)), {
    Some: (wipMap: WipMap) => wipMap,
    None: () => failwith(Errors.wip_not_found),
  });
  return match((Map.find_opt(id, wipMap)), {
    Some: (wipObj: Wip) => wipObj,
    None: () => failwith(Errors.wip_not_found),
  });
};
