type WipId = nat;

type Wip = {
  id: WipId,
  wip: string,
  tokens: list<nat>,
  active: bool,
};

type TokenData = big_map<nat, {
  wip_id: nat,
  note: string,
  mood: int, // default: -1, 1 ~ 10
}>;

type Storage = {
  token_count: nat,
  tickets: big_map<nat, ticket<nat>>,
  wips: big_map<address, map<WipId, Wip>>,
  wip_chars: nat, // prob ~100
  note_chars: nat, // prob ~50
  admin: address,
  paused: bool,
};

type Parameter =
  // permissionless
  | ["Set_wip", string]
  | ["Update_wip", { wip: string, id: WipId }]
  | ["Punch", { note: string, id: WipId }]
  | ["Activate_wip", WipId]
  | ["Deactivate_wip", WipId]
  // admin
  | ["Set_wip_chars", nat]
  | ["Set_note_chars", nat]
  | ["Set_pause", bool];

type Return = [list<operation>, Storage];

const setWip = (
  { token_count, tickets, wips, admin, wip_chars, note_chars, paused }: Storage,
  wip: string
): Storage => {
  if (paused) {
    failwith("PAUSED");
  }
  const sender = Tezos.get_sender();
  const wipMap: map<WipId, Wip> = match((Big_map.find_opt(sender, wips)), {
    Some: (wipMap: map<WipId, Wip>) => wipMap,
    None: () => (Map.empty as map<WipId, Wip>),
  });
  if (String.length(wip) > wip_chars) {
    failwith("WIP_EXCEEDS_MAX_LEN");
  }
  const id: nat = Map.size(wipMap);
  const newWip: Wip = {
    id,
    wip,
    tokens: (list([]) as list<nat>),
    active: true,
  };
  const updatedWipMap = Map.add(id, newWip, wipMap);
  const updatedWips = Big_map.update(
    sender,
    Some(updatedWipMap),
    wips
  );
  return { token_count, tickets, wips: updatedWips, admin, wip_chars, note_chars, paused };
};

const updateWip = (
  { token_count, tickets, wips, admin, wip_chars, note_chars, paused }: Storage,
  { wip, id }: { wip: string, id: nat }
): Storage => {
  if (paused) {
    failwith("PAUSED");
  }
  const sender = Tezos.get_sender();
  const wipMap: map<WipId, Wip> = match((Big_map.find_opt(sender, wips)), {
    Some: (wipMap: map<WipId, Wip>) => wipMap,
    None: () => failwith("NOT_FOUND"),
  });
  const wipObj: Wip = match((Map.find_opt(id, wipMap)), {
    Some: (wipObj: Wip) => wipObj,
    None: () => failwith("NOT_FOUND"),
  });
  if (String.length(wip) > wip_chars) {
    failwith("WIP_EXCEEDS_MAX_LEN");
  }
  const updatedWipMap = Map.update(id, Some({ ...wipObj, wip }), wipMap);
  const updatedWips = Big_map.update(sender, Some(updatedWipMap), wips);
  return { token_count, tickets, wips: updatedWips, admin, wip_chars, note_chars, paused };
};

const punch = (
  { token_count, tickets, wips, admin, wip_chars, note_chars, paused }: Storage,
  { note, id }: { note: string, id: WipId }
): Storage => {
  if (paused) {
    failwith("PAUSED");
  }
  const sender = Tezos.get_sender();
  const wipMap: map<WipId, Wip> = match((Big_map.find_opt(sender, wips)), {
    Some: (wipMap: map<WipId, Wip>) => wipMap,
    None: () => failwith("NOT_FOUND"),
  });
  const wipObj: Wip = match((Map.find_opt(id, wipMap)), {
    Some: (wipObj: Wip) => wipObj,
    None: () => failwith("NOT_FOUND"),
  });
  if (String.length(note) > note_chars) {
    failwith("NOTE_EXCEEDS_MAX_LEN");
  }
  const ticketId: nat = token_count + (1 as nat);
  const ticket_: ticket<nat> = Option.unopt(Tezos.create_ticket(ticketId, 1 as nat));
  const [_, updatedTickets] = Big_map.get_and_update(ticketId, Some(ticket_), tickets);
  const updatedWipMap = Map.update( id,
    Some({
      ...wipObj,
      tokens: list([ticketId, ...wipObj.tokens]),
    }),
    wipMap
  );
  const updatedWips = Big_map.update(sender, Some(updatedWipMap), wips);
  return {
    token_count: ticketId,
    tickets: updatedTickets,
    wips: updatedWips,
    admin,
    wip_chars,
    note_chars,
    paused,
  };
};

const activateWip = (
  { token_count, tickets, wips, admin, wip_chars, note_chars, paused }: Storage,
  id: WipId
): Storage => {
  const sender = Tezos.get_sender();
  const wipMap: map<WipId, Wip> = match((Big_map.find_opt(sender, wips)), {
    Some: (wipMap: map<WipId, Wip>) => wipMap,
    None: () => failwith("NOT_FOUND"),
  });
  const wipObj: Wip = match((Map.find_opt(id, wipMap)), {
    Some: (wipObj: Wip) => wipObj,
    None: () => failwith("NOT_FOUND"),
  });
  if (wipObj.active) {
    return { token_count, tickets, wips, admin, wip_chars, note_chars, paused };
  }
  const updatedWipMap = Map.update(id, Some({ ...wipObj, active: true }), wipMap);
  const updatedWips = Big_map.update(sender, Some(updatedWipMap), wips);
  return { token_count, tickets, wips: updatedWips, admin, wip_chars, note_chars, paused };
};

const deactivateWip = (
  { token_count, tickets, wips, admin, wip_chars, note_chars, paused }: Storage,
  id: WipId
): Storage => {
  const sender = Tezos.get_sender();
  const wipMap: map<WipId, Wip> = match((Big_map.find_opt(sender, wips)), {
    Some: (wipMap: map<WipId, Wip>) => wipMap,
    None: () => failwith("NOT_FOUND"),
  });
  const wipObj: Wip = match((Map.find_opt(id, wipMap)), {
    Some: (wipObj: Wip) => wipObj,
    None: () => failwith("NOT_FOUND"),
  });
  if (!wipObj.active) {
    return { token_count, tickets, wips, admin, wip_chars, note_chars, paused };
  }
  const updatedWipMap = Map.update(id, Some({ ...wipObj, active: false }), wipMap);
  const updatedWips = Big_map.update(sender, Some(updatedWipMap), wips);
  return { token_count, tickets, wips: updatedWips, admin, wip_chars, note_chars, paused };
};

const setWipChars = (
  { token_count, tickets, wips, admin, wip_chars, note_chars, paused }: Storage,
  chars: nat
): Storage => {
  assert_with_error((Tezos.get_sender() == admin), "INSUFFICIENT_PERMISSION");
  return { token_count, tickets, wips, admin, wip_chars: chars, note_chars, paused };
};

const setNoteChars = (
  { token_count, tickets, wips, admin, wip_chars, note_chars, paused }: Storage,
  chars: nat
): Storage => {
  assert_with_error((Tezos.get_sender() == admin), "INSUFFICIENT_PERMISSION");
  return { token_count, tickets, wips, admin, wip_chars, note_chars: chars, paused };
};

const setPause = (
  { token_count, tickets, wips, admin, wip_chars, note_chars, paused }: Storage,
  paused_: bool
) => {
  assert_with_error((Tezos.get_sender() == admin), "INSUFFICIENT_PERMISSION");
  return { token_count, tickets, wips, admin, wip_chars, note_chars, paused: paused_ };
}

const main = (parameter: Parameter, store: Storage): Return => {
  return [
    list([]),
    (match (parameter, {
      Set_wip: (wip: string) => setWip(store, wip),
      Update_wip: (params) => updateWip(store, params),
      Punch: (params) => punch(store, params),
      Activate_wip: (wip_id: WipId) => activateWip(store, wip_id),
      Deactivate_wip: (wip_id: WipId) => deactivateWip(store, wip_id),
      Set_wip_chars: (chars: nat) => setWipChars(store, chars),
      Set_note_chars: (chars: nat) => setNoteChars(store, chars),
      Set_pause: (paused: bool) => setPause(store, paused),
    }))
  ];
};

// @view
const token_exist = (id: nat, store: Storage): bool => {
  const { token_count, tickets, wips, admin, wip_chars, note_chars, paused } = store;
  return id < token_count;
};

// @view
const user_wips = (addr: address, store: Storage): map<WipId, Wip> => {
  const { token_count, tickets, wips, admin, wip_chars, note_chars, paused } = store;
  return match((Big_map.find_opt(addr, wips)), {
    Some: (wipMap: map<WipId, Wip>) => wipMap,
    None: () => failwith("NOT_FOUND"),
  });
};

// @view
const user_wip = (
  { addr, id }: { addr: address, id: WipId },
  store: Storage
): Wip => {
  const { token_count, tickets, wips, admin, wip_chars, note_chars, paused } = store;
  const wipMap: map<WipId, Wip> = match((Big_map.find_opt(addr, wips)), {
    Some: (wipMap: map<WipId, Wip>) => wipMap,
    None: () => failwith("NOT_FOUND"),
  });
  return match((Map.find_opt(id, wipMap)), {
    Some: (wipObj: Wip) => wipObj,
    None: () => failwith("NOT_FOUND"),
  });
};

// @view
const is_wip_active = (
  { addr, id }: { addr: address, id: WipId },
  store: Storage
): bool => {
  const { token_count, tickets, wips, admin, wip_chars, note_chars, paused } = store;
  const wipMap: map<WipId, Wip> = match((Big_map.find_opt(addr, wips)), {
    Some: (wipMap: map<WipId, Wip>) => wipMap,
    None: () => failwith("NOT_FOUND"),
  });
  const wipObj: Wip = match((Map.find_opt(id, wipMap)), {
    Some: (wipObj: Wip) => wipObj,
    None: () => failwith("NOT_FOUND"),
  });
  return wipObj.active;
};

// kinda complex, not sure if it's needed
// const user_wip_of_token = (id: WipId, store: Storage) => {
// };
